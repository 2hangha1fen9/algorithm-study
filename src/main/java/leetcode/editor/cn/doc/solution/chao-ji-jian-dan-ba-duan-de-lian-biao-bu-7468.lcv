### 解题思路

此处撰写解题思路

### 代码

* cpp

```cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* m=l1;
        ListNode* n=l2;
        
       while(m->next!=NULL&&n->next!=NULL){//看哪个链表先遍历完
           m=m->next;
           n=n->next;
       }
 //把两个链表补为一样长
       if(m->next==NULL){//n长
           while(n->next!=NULL){         
           ListNode* k=new   ListNode;
           k->val=0;
           k->next=NULL;
           m->next=k;
           m=m->next;
           n=n->next;
       }
       }else{//m长
            while(m->next!=NULL){
           ListNode* k=new   ListNode;
           k->val=0;
           k->next=NULL;
           n->next=k;
           n=n->next;
           m=m->next;
       }
       }
       m=l1;n=l2;
       while(m->next!=NULL){//链表val相加
           int r=m->val+n->val;
           m->val=r%10;
           m->next->val+=r/10;
           m=m->next;
           n=n->next;
       } 
    int y=m->val+n->val;
    if(y>=10){  //最后一位是否进位
        ListNode* k=new   ListNode(0);
        k->val=y/10;
        k->next=NULL;
        m->val=y%10;
        m->next=k;
     }
else{
    m->val=y%10;
}
        return l1;
    }
};
```

